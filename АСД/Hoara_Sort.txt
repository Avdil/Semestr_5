void hoarasort(int* a, int first, int last);
int *a = new int[n];
a[i] = A[i];
int h1 = GetTickCount();
	hoarasort(a, 0, n - 1);
	int h2 = GetTickCount();
	cout << "\nWorking time of the hoarasort = " << h2 - h1 << endl;
delete[]a;
void hoarasort(int* a, int first, int last)
{
	int i = first, j = last;
	int tmp, x = a[(first + last) / 2];
	do {
		while (a[i] < x)
			i++;
		while (a[j] > x)
			j--;
		if (i <= j)
		{
			if (i < j)
			{
				tmp = a[i];
				a[i] = a[j];
				a[j] = tmp;
			}
			i++;
			j--;
		}
	} while (i <= j);
	if (i < last)
		hoarasort(a, i, last);
	if (first < j)
		hoarasort(a, first, j);
}

int *hoara = new int[n];
hoara[i] = Mass_u[i];
int h1 = GetTickCount();
	hoarasort(hoara, 0, n - 1);
	int h2 = GetTickCount();
	cout << "\nWorking time of the hoarasort_u = " << h2 - h1 << endl;
delete[]hoara;
int *hoara_v = new int[n];
hoara_v[i] = Mass_v[i];
int h1 = GetTickCount();
	hoarasort(hoara_v, 0, n - 1);
	int h2 = GetTickCount();
	cout << "\nWorking time of the hoarasort = " << h2 - h1 << endl;
delete[]hoara_v;
